# interpreter for shell commands
set shell sh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10
set relativenumber 
set drawbox
set number
set hidden



# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o ${{
    clear
    test -L $f && f=$($(echo open $f with:);read toexec;$toexec $f)


    file=$(basename $(echo $f))
    echo open $file with:
    read toexec
    $toexec $file &
}}

map c ${{
    alacritty -e nvim $fx &
}}

map C ${{
    alacritty -e nvim "$PWD" &
}}



cmd cpath ${{
	echo "$PWD" | xclip -selection clipboard
}}

cmd link ${{
    for f in $fs; do
        echo "creating link of $f on $PWD"
	ln -s $f $PWD
    done
}}

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.

cmd open ${{
test -L $f && f=$(readlink -f $f)

file="$f"

[[ -z "$file" ]] && { echo 'argument required' >&2; exit 1; }

if [[ ! -f "$file" ]]; then
  $BROWSER "$file" &>/dev/null &
  exit 0
fi

if ! which xdg-mime &>/dev/null; then
  echo 'xdg-mime required' >&2
  exit 1
fi


read -r mimetype < \
  <(xdg-mime query filetype "$file" 2>/dev/null | cut -d ';' -f 1)
echo $file

  case "$mimetype" in
    application/pdf) zathura $file;;
    application/epub+zip) zathura $file;;
    application/ogg) cvlc $file;;
    application/json) nvim $file;;
    application/javascript) nvim $file;;
    application/zip) clear && 7zo $file | nvim;;
    inode/*) nvim $file;;
    text/html) firefox $file;;
    text/*) nvim $file;;
    audio/*) cvlc $file;;
    video/*) vlc $file;;
    image/svg+xml) firefox $file;; 
    image/*) nsxiv-dir $file | lffromnsx;; 
    font/*) fontforge $file;;
    application/vnd.ms-opentype) fontforge $file;;
    *) echo "$file: unmatched mimetype, $mimetype" >&2;;
  esac

}}



# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# cmd rename 'renamer "$f"'
# map a rename
# map a push :rename<space>

map a ${{
    renamer $fx
}}



# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash


# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


cmd mkdirm ${{
    set -f
    read newd
    printf "Directory name: "
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd dust ${{
  clear
  dust 
  echo " "
  read
}}

cmd touch ${{
  printf "File Name: "
  read ans
  touch $ans
  $EDITOR $ans
}}


cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}


cmd help &echo $TERM -e man lf | sh

cmd q $TERM



map . set hidden!
map <backspace2> set hidden!

map D delete

map S &echo $TERM | sh

map m mark-load
map M mark-save


map r &dragon-drop -a -x $fx


cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search


cmd fzf_jump ${{
    res="$(find . | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map go :fzf_jump

map i &{{
	nsxiv . -r -o -t | lffromnsx
}}


map tig !tig 

